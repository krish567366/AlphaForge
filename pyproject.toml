[build-system]
requires = [
    "setuptools>=68.0",
    "wheel>=0.40",
    "cython>=3.0.0",
    "numpy>=1.26.4",
    "pyo3-build-config>=0.21.0",
]
build-backend = "setuptools.build_meta"

[project]
name = "alphaforge"
version = "1.0.0"
description = "High-performance algorithmic trading platform"
authors = [
    {name = "AlphaForge Team", email = "team@alphaforge.io"},
]
maintainers = [
    {name = "AlphaForge Team", email = "team@alphaforge.io"},
]
license = {text = "MIT"}
readme = "README.md"
homepage = "https://alphaforge.io"
repository = "https://github.com/alphaforge/alphaforge"
documentation = "https://docs.alphaforge.io"
keywords = [
    "trading",
    "algorithmic", 
    "finance",
    "high-frequency",
    "market-data",
    "execution",
    "backtesting",
    "rust",
    "python",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Financial and Insurance Industry",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Cython",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12", 
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Rust",
    "Topic :: Office/Business :: Financial",
    "Topic :: Scientific/Engineering",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.11"
dependencies = [
    "numpy>=1.26.4",
    "pandas>=2.2.3",
    "pyarrow>=20.0.0",
    "msgspec>=0.19.0",
    "uvloop>=0.21.0; platform_system != 'Windows'",
    "aiofiles>=24.1.0",
    "click>=8.1.7",
    "pydantic>=2.8.0",
    "redis>=5.1.1",
    "psutil>=6.0.0",
    "cryptography>=43.0.1",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.3.3",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=5.0.0",
    "pytest-benchmark>=4.0.0",
    "mypy>=1.11.2",
    "ruff>=0.6.8",
    "pre-commit>=3.8.0",
    "sphinx>=8.0.2",
    "build>=1.2.2",
    "twine>=5.1.1",
]
docs = [
    "sphinx>=8.0.2",
    "sphinx-book-theme>=1.1.3",
    "myst-parser>=4.0.0",
]
test = [
    "pytest>=8.3.3",
    "pytest-asyncio>=0.24.0", 
    "pytest-cov>=5.0.0",
    "pytest-benchmark>=4.0.0",
    "pytest-xdist>=3.6.0",
]

[project.scripts]
alphaforge = "alphaforge.cli:main"

[project.urls]
"Bug Reports" = "https://github.com/alphaforge/alphaforge/issues"
"Funding" = "https://github.com/sponsors/alphaforge"
"Source" = "https://github.com/alphaforge/alphaforge"
"Documentation" = "https://docs.alphaforge.io"

[tool.setuptools]
packages = ["alphaforge"]
include-package-data = true

[tool.setuptools.package-data]
alphaforge = [
    "*.pyi",
    "*.pyx", 
    "*.pxd",
    "*.so",
    "*.dll",
    "*.dylib",
]

[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--disable-warnings",
    "-ra",
]
markers = [
    "unit: marks tests as unit tests",
    "integration: marks tests as integration tests", 
    "performance: marks tests as performance tests",
    "slow: marks tests as slow running",
]

[tool.coverage.run]
source = ["alphaforge"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/conftest.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
warn_unused_ignores = true
disallow_any_generics = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true

[tool.ruff]
target-version = "py311"
line-length = 100
fix = true

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by formatter
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["E402", "F401", "F403"]
"conftest.py" = ["F401", "F403"]
